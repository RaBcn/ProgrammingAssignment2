Q()
q()
a<-matrix(1:4,2,2)
a
## This Function creates a special matrix object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setMatrix <- function(mean) m <<- mean
getMatrix <- function() m
list(set = set, get = get,
setMatrix = setMatrix,
getMatrix = getMatrix)
}
#This function computes the inverse of the special "matrix" returned by makeCacheMatrix above.
#If the inverse has already been calculated (and the matrix has not changed),
#then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
m <- x$getMatrix ()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setMatrix (m)
m
}
makeCacheMatrix(a)
cacheSolve(a)
b<-makeCacheMatrix(a)
cacheSolve(b)
cacheSolve(b)
matrix(5:8,2,2)
c-matrix(5:8,2,2)
c<-matrix(5:8,2,2)
makeCacheMatrix(c)
d<-makeCacheMatrix(c)
makeCacheMatrix(d)
cacheSolve(d)
cacheSolve(d)
cacheSolve(b)
